[path]
### 日志位置
logging_path = "./logs"

### 图片目录
source_path = "./raw"

### 输出目录
output_path = "./epubs"

[format]
### 文件组织格式
# 可选:
# general: 文件名或文件夹名即为漫画, 章节, 页面的标题
# tachiyomi: 与general类似, 但漫画文件夹中应当包含一个tachiyomi格式的元数据.json文件
#   其中各字段对应元数据:
#   title: 漫画标题
#   author: 作者, 多个作者以逗号或分号隔开
#   description: 简介
#   genre: 分类(对应epub的subject元数据)
#   artist和status字段不使用
# bcdown: 文件名或文件夹名可以任意命名, 由各文件夹中的.toml文件确定漫画, 章节, 页面的标题, 适配bcdown
# dmzjbackup: 与tachiyomi类似, 但章节顺序由漫画文件夹中的info.toml指定, 适配作者的另一个仓库Dmzj_backup
source_format = "general"

### 输出格式
# 可选: epub, cbz
output_format = "epub"

### 章节标题格式, 是一个format方法可解析的字符串, 可选的参数有:
# title: 章节标题
# index: 章节序号
chapter_format = "{title}"

### 页面标题格式, 是一个format方法可解析的字符串, 可选的参数有:
# title: 页面标题
# index: 页面在章节内的序号
page_format = "{title}"

[epub]
### 视图尺寸
# 没什么用, viewbox会自动适应, 且不会造成图片拉伸; 对于极少数不指定页面大小的阅读器可能有效
view_height = 1680
view_width = 1264

### 阅读顺序
# 可选ltr: 从左向右, rtl: 从右向左
reading_order = "ltr"

### 是否重新组织图片
# 如果启用, 打包后的epub文件会把所有图片放在item/image目录下并重新命名
# 对于极少数阅读器, 开启此选项可能有效, 因为图片名称中可能含有空格, 加号等字符
# 这些字符作为文件名是合法的, 但部分阅读器在渲染时可能会将这些字符视作特殊字符
rearrangement = false

############################################################
#                       漫画与章节处理
############################################################

### 手动指定每部漫画的章节拆分方式
[manual_split]
### 记录分点的文件
# 分点文件应当为.toml格式, 内容形如
# [comic0]
# title = "example"
# breakpoints = ["第14章", "第29章"]
# 其中:
# comic0可以是任意值, 程序不会解析该值, 只需保证不重复即可
# title是漫画的实际标题
# breakpoints是各分卷第一章标题(第一分卷的第一章可以省略)
# 要禁用手动拆分, 将此项设为空字符串
manual_split = ""

### 对于分割后的文件, 是否用第一页代替封面
# Notice: 启用此项会导致原封面丢失
manual_replace_cover = true

### 是否将分割后的分卷放在单独的文件夹
manual_separate_folder = false

### 分割后的标题, 是一个format方法可解析的字符串, 可选的参数有:
# title: 漫画原标题
# index: 分卷的序号, 从1开始
# first_ord: 分割后第一章的序号
# last_ord: 分割后最后一章的序号
# first_title: 分割后第一章的标题
# last_title: 分割后最后一章的标题
manual_title_format = "{title} 第{index}卷"

### 按章节数拆分漫画
### 如果与手动拆分同时指定, 且分点描述文件包含当前漫画, 则以手动拆分方式为准
[fixed_split]
### 每个分卷的章节数
# 要禁用固定章节数分割, 将此项设为-1
fixed_split = -1

### 同 manual_replace_cover
fixed_replace_cover = true

### 同 manual_separate_folder
fixed_separate_folder = false

### 同 manual_title_format
fixed_title_format = "{title} 第{first_ord}-{last_ord}章"

### 漫画过滤
### 要禁用某项过滤, 将该项设为-1
[comic_filter]
### 最小章节数
# 过滤章节数过少的漫画(一话短篇, 客座连载等)
min_chapters = -1

### 最小页数及其比例
# 过滤页数过少的漫画(推特短漫等)
min_pages = -1
# 配合上一项使用, 页数过少的章节数比例高于此值将被过滤
# 假设min_pages=5, min_pages_ratio=0.9
# 例: 某推特短漫共20话, 其中19话均只有3页, 剩余1话有10页, 按照阈值5比例0.9会被过滤
# 例2: 某一般连载共20话, 其中10话为正篇每话约30页, 剩余10话为番外均只有4页, 按照阈值5比例0.9不会被过滤
min_pages_ratio = 0.9

### 最小总页数
# 过滤总页数过少的漫画
min_total_pages = -1

### 章节过滤
### 要禁用某项过滤, 将该项设为-1
[chapter_filter]
### 最大页数
# 过滤页数过多的章节(单行本, 画集等)
# 页数高于此值的章节将被过滤
max_pages = -1

### 版权页去重
### Notice: 本项目并没有去除版权页, 只是将重复的版权页移至最后
[dedup]
### 是否启用版权页去重
enable_dedup = false
### 去重使用的hash方式
# 可选phash(推荐), dhash, ahash, whash, 详见https://github.com/idealo/imagededup
dedup_method = "phash"

############################################################
#                       图像处理
############################################################

[image_pipeline]
### 是否启用图像处理
# Notice: 启用图像处理将会不可避免地改变图像内容
# 即使不启用下列任何一个图像处理模块并将JPEG质量设为-1, 输出图像与原图像仍会有灰度值<=1的误差
# 这可能是由于PIL量化后取整的方式与原图像不同, 造成输出存在舍入误差
# 通常情况下, 这些转换损耗无法被人眼察觉
# 此项目通过复用JPEG量化表已最大限度地避免转换损耗, 并且保持处理后的图像与原图像具有相当的质量
# 如果您仍非常介意转换损耗, 请考虑禁用图像处理
enable_image_pipeline = false

### 固定图片文件格式
# 可选: "", ".jpg", ".jpeg", ".png", ".avif", ".webp"
# (例: 设为".jpg"会将所有图片转为.jpg格式)
# 如果为空字符串, 则按照图片原格式输出
# Notice: 目前支持JPEG, PNG, AVIF, WebP格式, 其他格式的图像将被忽略
fixed_ext = ""

### JPEG图像质量
# 为0-100之间的整数或-1
# 质量因子越大, 图像质量越好, 但文件体积也越大, 不建议设为95以上的值
# 对于原格式为JPEG的图像, 会先计算原图像的质量因子, 质量因子大于此值的图像将被压缩到此质量, 否则以原质量输出
# 若为-1, 则总是以原质量输出(与100等价)
# 对于原格式为非JPEG的图像, 会以此质量输出
# 若为-1, 则以无压缩的质量输出
# Notice: 这里的以原质量输出是通过使用原图像的量化表实现, 而非以原质量因子输出
# 质量因子与量化表涉及JPEG压缩原理, 不感兴趣的直接设95即可
jpeg_quality = 95

### AVIF图像质量
# 为0-100之间的整数
# 与JPEG图像质量类似, 但是由于库函数的限制无法读取原质量，因此必须手动设置
avif_quality = 85

### AVIF编码速度
# 为0-10之间的整数
# 速度值越大, 编码速度越快, 但图像质量会降低
avif_speed = 6

### WebP无损压缩
# 是否启用无损压缩
webp_lossless = false

### WebP图像质量
# 为0-100之间的整数
# 与JPEG图像质量类似, 但是由于库函数的限制无法读取原质量，因此必须手动设置
# 当启用无损压缩时决定压缩水平, 越小压缩越快, 但文件体积也越大
webp_quality = 95

### WebP压缩模式
# 为0-6之间的整数
# 质量与压缩速度的平衡, 0为最快压缩速度, 6为最高质量
webp_method = 4

### PNG图像压缩等级
# 为0-9之间的整数或-1
# 若为0-9之间的整数, 表示图像压缩等级, 越小文件体积越小, 压缩和读取时间越长
# 若为-1, 表示以尽可能小的文件体积压缩
png_compression = 6

[crop]
### 是否启用白边裁剪
enable_crop = false

### 白边阈值
# 灰度值在此闭区间内视为有效内容
# 如果含有水印, 建议设为[0, 140], 水印较深的可以进一步降低阈值; 如果不含水印可以设为[0, 255]
# (注: 实测叔叔家水印一般不低于140)
crop_lower_threshold = 0
crop_upper_threshold = 255

[downsample]
### 是否启用下采样
enable_downsample = false

### 阅读器屏幕尺寸
# 分辨率高于此值的图片将被下采样
screen_height = 1680
screen_width = 1264

### 插值方法
# 可选cubic(推荐), lanczos, box, linear, nearest
interpolation = "cubic"
